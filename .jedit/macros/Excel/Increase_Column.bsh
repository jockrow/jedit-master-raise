/************************************************
*			@author Richard Mart√≠nez 2017				*
*************************************************/

/**
* Get value for Increase or Decrease in Column
* @example
*	Z + 1 = AA
*/

import javax.swing.border.*;
import javax.swing.text.InternationalFormatter;
import java.util.regex.Pattern;

void showGui(){
	private static String TITLE = "Get Value From Column";

	KeyListener keyListener = new KeyListener(){
		public void keyReleased(KeyEvent keyEvent){
			if (keyEvent.getKeyCode() == KeyEvent.VK_ESCAPE){
				dialog.dispose();
			}
			else{
				validation();
			}
		}

		public void keyPressed(KeyEvent keyEvent){}
		public void keyTyped(KeyEvent keyEvent){}
	};

	dialog = new JDialog(view, TITLE, false);
	content = new JPanel(new BorderLayout());
	content.setBorder(new EmptyBorder(12, 12, 12, 12));
	dialog.setContentPane(content);
	fieldPanel = new JPanel(new GridLayout(3, 3, 2, 2));

	InternationalFormatter formatNumber = new InternationalFormatter();
	formatNumber.setMinimum(new Integer(1));
	
	lblValidate = new JTextArea("");
	lblValidate.setEditable(false);
	lblValidate.setBackground(content.getBackground());

	validationPanel = new JPanel();
	validationPanel.add(lblValidate);
	validationPanel.setBorder(new EmptyBorder(0, 30, 20, 30));
	content.add(validationPanel, "Center");
	
	JTextField txtLetterColumn = new JTextField("A");
	txtLetterColumn.addKeyListener(keyListener);
	fieldPanel.add(new JLabel("Letter Column"));
	fieldPanel.add(txtLetterColumn);
	
	JFormattedTextField txtAddColumns = new JFormattedTextField(formatNumber);
	txtAddColumns.setValue(1);
	txtAddColumns.addKeyListener(keyListener);
	fieldPanel.add(new JLabel("Additional Columns"));
	fieldPanel.add(txtAddColumns);
	
	JTextField txtResult = new JTextField("B");
	txtResult.setEditable(false);
	fieldPanel.add(new JLabel("Result:"));
	fieldPanel.add(txtResult);
	
	content.add(fieldPanel, "North");
	
	buttonPanel = new JPanel();
	buttonPanel.setLayout(new BoxLayout(buttonPanel, BoxLayout.X_AXIS));
	buttonPanel.setBorder(new EmptyBorder(12, 30, 0, 30));
	cancel = new JButton("Cancel");
	copy = new JButton("Copy new Column");
	dialog.getRootPane().setDefaultButton(copy);
	buttonPanel.add(Box.createHorizontalStrut(6));
	buttonPanel.add(copy);
	buttonPanel.add(cancel);
	content.add(buttonPanel, "South");

	cancel.addActionListener(this);
	copy.addActionListener(this);

	dialog.pack();
	dialog.setLocationRelativeTo(view);
	dialog.setDefaultCloseOperation(JDialog.DISPOSE_ON_CLOSE);
	dialog.setVisible(true);

	void actionPerformed(e){
		validation();
	
		if(e.getSource() != cancel){
			if(e.getSource() == copy && txtResult.getText().trim() != ""){
				Registers.setRegister('$', txtResult.getText());
			}
		}
		else{
			dialog.dispose();
		}
	}
	
	boolean displayError(String message){
		lblValidate.setForeground(Color.red);
		lblValidate.setText(message);
		txtResult.setText("");
		
		return false;
	}

	boolean validation(){
		String ERROR_NUMBERS = "This field must have only Numbers";
		String ERROR_LETTER = "This field must have only Letters";
		try{
			String numberColumn = txtLetterColumn.getText();
			Pattern p = Pattern.compile(".*[0-9].*");
			if(p.matcher(numberColumn).find()){
				return displayError(ERROR_LETTER);
			}
			
			lblValidate.setForeground(Color.black);
			lblValidate.setText("");
			processText();
			return true;
		}
		catch(NumberFormatException ex){
			displayError(ERROR_NUMBERS);
		}
		processText();
	}

	void processText(){
		String column = txtLetterColumn.getText();
		int addColumns = Integer.valueOf(txtAddColumns.getText());
		txtResult.setText(new Excel().increaseColumn(column, addColumns));
	}
}

showGui();